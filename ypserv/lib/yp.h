/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _YP_H_RPCGEN
#define _YP_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define YPMAXRECORD 1024
#define YPMAXDOMAIN 64
#define YPMAXMAP 64
#define YPMAXPEER 64

enum ypstat {
	YP_TRUE = 1,
	YP_NOMORE = 2,
	YP_FALSE = 0,
	YP_NOMAP = -1,
	YP_NODOM = -2,
	YP_NOKEY = -3,
	YP_BADOP = -4,
	YP_BADDB = -5,
	YP_YPERR = -6,
	YP_BADARGS = -7,
	YP_VERS = -8,
};
typedef enum ypstat ypstat;

enum ypxfrstat {
	YPXFR_SUCC = 1,
	YPXFR_AGE = 2,
	YPXFR_NOMAP = -1,
	YPXFR_NODOM = -2,
	YPXFR_RSRC = -3,
	YPXFR_RPC = -4,
	YPXFR_MADDR = -5,
	YPXFR_YPERR = -6,
	YPXFR_BADARGS = -7,
	YPXFR_DBM = -8,
	YPXFR_FILE = -9,
	YPXFR_SKEW = -10,
	YPXFR_CLEAR = -11,
	YPXFR_FORCE = -12,
	YPXFR_XFRERR = -13,
	YPXFR_REFUSED = -14,
};
typedef enum ypxfrstat ypxfrstat;

typedef char *domainname;

typedef char *mapname;

typedef char *peername;

typedef struct {
	u_int keydat_len;
	char *keydat_val;
} keydat;

typedef struct {
	u_int valdat_len;
	char *valdat_val;
} valdat;

struct ypmap_parms {
	domainname domain;
	mapname map;
	u_int ordernum;
	peername peer;
};
typedef struct ypmap_parms ypmap_parms;

struct ypreq_key {
	domainname domain;
	mapname map;
	keydat key;
};
typedef struct ypreq_key ypreq_key;

struct ypreq_nokey {
	domainname domain;
	mapname map;
};
typedef struct ypreq_nokey ypreq_nokey;

struct ypreq_xfr {
	ypmap_parms map_parms;
	u_int transid;
	u_int prog;
	u_int port;
};
typedef struct ypreq_xfr ypreq_xfr;

struct ypresp_val {
	ypstat stat;
	valdat val;
};
typedef struct ypresp_val ypresp_val;

struct ypresp_key_val {
	ypstat stat;
	valdat val;
	keydat key;
};
typedef struct ypresp_key_val ypresp_key_val;

struct ypresp_master {
	ypstat stat;
	peername peer;
};
typedef struct ypresp_master ypresp_master;

struct ypresp_order {
	ypstat stat;
	u_int ordernum;
};
typedef struct ypresp_order ypresp_order;

typedef struct
{
    struct
    {
        int (*encode)(ypresp_key_val *val, void *data);
        int (*close)(void *data);
    } u;
    void *data;
} xdr_ypall_cb_t;

struct ypresp_all {
	bool_t more;
	union {
		ypresp_key_val val;
	} ypresp_all_u;
};
typedef struct ypresp_all ypresp_all;

struct ypresp_xfr {
	u_int transid;
	ypxfrstat xfrstat;
};
typedef struct ypresp_xfr ypresp_xfr;

struct ypmaplist {
	mapname map;
	struct ypmaplist *next;
};
typedef struct ypmaplist ypmaplist;

struct ypresp_maplist {
	ypstat stat;
	ypmaplist *maps;
};
typedef struct ypresp_maplist ypresp_maplist;

enum yppush_status {
	YPPUSH_SUCC = 1,
	YPPUSH_AGE = 2,
	YPPUSH_NOMAP = -1,
	YPPUSH_NODOM = -2,
	YPPUSH_RSRC = -3,
	YPPUSH_RPC = -4,
	YPPUSH_MADDR = -5,
	YPPUSH_YPERR = -6,
	YPPUSH_BADARGS = -7,
	YPPUSH_DBM = -8,
	YPPUSH_FILE = -9,
	YPPUSH_SKEW = -10,
	YPPUSH_CLEAR = -11,
	YPPUSH_FORCE = -12,
	YPPUSH_XFRERR = -13,
	YPPUSH_REFUSED = -14,
};
typedef enum yppush_status yppush_status;

struct yppushresp_xfr {
	u_int transid;
	yppush_status status;
};
typedef struct yppushresp_xfr yppushresp_xfr;

enum ypbind_resptype {
	YPBIND_SUCC_VAL = 1,
	YPBIND_FAIL_VAL = 2,
};
typedef enum ypbind_resptype ypbind_resptype;

struct ypbind_binding {
	char ypbind_binding_addr[4];
	char ypbind_binding_port[2];
};
typedef struct ypbind_binding ypbind_binding;

struct ypbind_resp {
	ypbind_resptype ypbind_status;
	union {
		u_int ypbind_error;
		ypbind_binding ypbind_bindinfo;
	} ypbind_resp_u;
};
typedef struct ypbind_resp ypbind_resp;
#define YPBIND_ERR_ERR 1
#define YPBIND_ERR_NOSERV 2
#define YPBIND_ERR_RESC 3

struct ypbind_setdom {
	domainname ypsetdom_domain;
	ypbind_binding ypsetdom_binding;
	u_int ypsetdom_vers;
};
typedef struct ypbind_setdom ypbind_setdom;

#define YPPROG 100004
#define YPVERS 2

#if defined(__STDC__) || defined(__cplusplus)
#define YPPROC_NULL 0
extern  enum clnt_stat ypproc_null_2(void *, void *, CLIENT *);
extern  bool_t ypproc_null_2_svc(void *, void *, struct svc_req *);
#define YPPROC_DOMAIN 1
extern  enum clnt_stat ypproc_domain_2(domainname *, bool_t *, CLIENT *);
extern  bool_t ypproc_domain_2_svc(domainname *, bool_t *, struct svc_req *);
#define YPPROC_DOMAIN_NONACK 2
extern  enum clnt_stat ypproc_domain_nonack_2(domainname *, bool_t *, CLIENT *);
extern  bool_t ypproc_domain_nonack_2_svc(domainname *, bool_t *, struct svc_req *);
#define YPPROC_MATCH 3
extern  enum clnt_stat ypproc_match_2(ypreq_key *, ypresp_val *, CLIENT *);
extern  bool_t ypproc_match_2_svc(ypreq_key *, ypresp_val *, struct svc_req *);
#define YPPROC_FIRST 4
extern  enum clnt_stat ypproc_first_2(ypreq_key *, ypresp_key_val *, CLIENT *);
extern  bool_t ypproc_first_2_svc(ypreq_nokey *, ypresp_key_val *, struct svc_req *);
#define YPPROC_NEXT 5
extern  enum clnt_stat ypproc_next_2(ypreq_key *, ypresp_key_val *, CLIENT *);
extern  bool_t ypproc_next_2_svc(ypreq_key *, ypresp_key_val *, struct svc_req *);
#define YPPROC_XFR 6
extern  enum clnt_stat ypproc_xfr_2(ypreq_xfr *, ypresp_xfr *, CLIENT *);
extern  bool_t ypproc_xfr_2_svc(ypreq_xfr *, ypresp_xfr *, struct svc_req *);
#define YPPROC_CLEAR 7
extern  enum clnt_stat ypproc_clear_2(void *, void *, CLIENT *);
extern  bool_t ypproc_clear_2_svc(void *, void *, struct svc_req *);
#define YPPROC_ALL 8
extern  enum clnt_stat ypproc_all_2(ypreq_nokey *, ypresp_all *, CLIENT *);
extern  bool_t ypproc_all_2_svc(ypreq_nokey *, ypresp_all *, struct svc_req *);
#define YPPROC_MASTER 9
extern  enum clnt_stat ypproc_master_2(ypreq_nokey *, ypresp_master *, CLIENT *);
extern  bool_t ypproc_master_2_svc(ypreq_nokey *, ypresp_master *, struct svc_req *);
#define YPPROC_ORDER 10
extern  enum clnt_stat ypproc_order_2(ypreq_nokey *, ypresp_order *, CLIENT *);
extern  bool_t ypproc_order_2_svc(ypreq_nokey *, ypresp_order *, struct svc_req *);
#define YPPROC_MAPLIST 11
extern  enum clnt_stat ypproc_maplist_2(domainname *, ypresp_maplist *, CLIENT *);
extern  bool_t ypproc_maplist_2_svc(domainname *, ypresp_maplist *, struct svc_req *);
extern int ypprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define YPPROC_NULL 0
extern  enum clnt_stat ypproc_null_2();
extern  bool_t ypproc_null_2_svc();
#define YPPROC_DOMAIN 1
extern  enum clnt_stat ypproc_domain_2();
extern  bool_t ypproc_domain_2_svc();
#define YPPROC_DOMAIN_NONACK 2
extern  enum clnt_stat ypproc_domain_nonack_2();
extern  bool_t ypproc_domain_nonack_2_svc();
#define YPPROC_MATCH 3
extern  enum clnt_stat ypproc_match_2();
extern  bool_t ypproc_match_2_svc();
#define YPPROC_FIRST 4
extern  enum clnt_stat ypproc_first_2();
extern  bool_t ypproc_first_2_svc();
#define YPPROC_NEXT 5
extern  enum clnt_stat ypproc_next_2();
extern  bool_t ypproc_next_2_svc();
#define YPPROC_XFR 6
extern  enum clnt_stat ypproc_xfr_2();
extern  bool_t ypproc_xfr_2_svc();
#define YPPROC_CLEAR 7
extern  enum clnt_stat ypproc_clear_2();
extern  bool_t ypproc_clear_2_svc();
#define YPPROC_ALL 8
extern  enum clnt_stat ypproc_all_2();
extern  bool_t ypproc_all_2_svc();
#define YPPROC_MASTER 9
extern  enum clnt_stat ypproc_master_2();
extern  bool_t ypproc_master_2_svc();
#define YPPROC_ORDER 10
extern  enum clnt_stat ypproc_order_2();
extern  bool_t ypproc_order_2_svc();
#define YPPROC_MAPLIST 11
extern  enum clnt_stat ypproc_maplist_2();
extern  bool_t ypproc_maplist_2_svc();
extern int ypprog_2_freeresult ();
#endif /* K&R C */

#define YPPUSH_XFRRESPPROG 0x40000000
#define YPPUSH_XFRRESPVERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define YPPUSHPROC_NULL 0
extern  enum clnt_stat yppushproc_null_1(void *, void *, CLIENT *);
extern  bool_t yppushproc_null_1_svc(void *, void *, struct svc_req *);
#define YPPUSHPROC_XFRRESP 1
extern  enum clnt_stat yppushproc_xfrresp_1(yppushresp_xfr *, void *, CLIENT *);
extern  bool_t yppushproc_xfrresp_1_svc(yppushresp_xfr *, void *, struct svc_req *);
extern int yppush_xfrrespprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define YPPUSHPROC_NULL 0
extern  enum clnt_stat yppushproc_null_1();
extern  bool_t yppushproc_null_1_svc();
#define YPPUSHPROC_XFRRESP 1
extern  enum clnt_stat yppushproc_xfrresp_1();
extern  bool_t yppushproc_xfrresp_1_svc();
extern int yppush_xfrrespprog_1_freeresult ();
#endif /* K&R C */

#define YPBINDPROG 100007
#define YPBINDVERS 2

#if defined(__STDC__) || defined(__cplusplus)
#define YPBINDPROC_NULL 0
extern  enum clnt_stat ypbindproc_null_2(void *, void *, CLIENT *);
extern  bool_t ypbindproc_null_2_svc(void *, void *, struct svc_req *);
#define YPBINDPROC_DOMAIN 1
extern  enum clnt_stat ypbindproc_domain_2(domainname *, ypbind_resp *, CLIENT *);
extern  bool_t ypbindproc_domain_2_svc(domainname *, ypbind_resp *, struct svc_req *);
#define YPBINDPROC_SETDOM 2
extern  enum clnt_stat ypbindproc_setdom_2(ypbind_setdom *, void *, CLIENT *);
extern  bool_t ypbindproc_setdom_2_svc(ypbind_setdom *, void *, struct svc_req *);
extern int ypbindprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define YPBINDPROC_NULL 0
extern  enum clnt_stat ypbindproc_null_2();
extern  bool_t ypbindproc_null_2_svc();
#define YPBINDPROC_DOMAIN 1
extern  enum clnt_stat ypbindproc_domain_2();
extern  bool_t ypbindproc_domain_2_svc();
#define YPBINDPROC_SETDOM 2
extern  enum clnt_stat ypbindproc_setdom_2();
extern  bool_t ypbindproc_setdom_2_svc();
extern int ypbindprog_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ypstat (XDR *, ypstat*);
extern  bool_t xdr_ypxfrstat (XDR *, ypxfrstat*);
extern  bool_t xdr_domainname (XDR *, domainname*);
extern  bool_t xdr_mapname (XDR *, mapname*);
extern  bool_t xdr_peername (XDR *, peername*);
extern  bool_t xdr_keydat (XDR *, keydat*);
extern  bool_t xdr_valdat (XDR *, valdat*);
extern  bool_t xdr_ypmap_parms (XDR *, ypmap_parms*);
extern  bool_t xdr_ypreq_key (XDR *, ypreq_key*);
extern  bool_t xdr_ypreq_nokey (XDR *, ypreq_nokey*);
extern  bool_t xdr_ypreq_xfr (XDR *, ypreq_xfr*);
extern  bool_t xdr_ypresp_val (XDR *, ypresp_val*);
extern  bool_t xdr_ypresp_key_val (XDR *, ypresp_key_val*);
extern  bool_t xdr_ypresp_master (XDR *, ypresp_master*);
extern  bool_t xdr_ypresp_order (XDR *, ypresp_order*);
extern  bool_t xdr_ypresp_all (XDR *, ypresp_all*);
extern  bool_t xdr_ypresp_xfr (XDR *, ypresp_xfr*);
extern  bool_t xdr_ypmaplist (XDR *, ypmaplist*);
extern  bool_t xdr_ypresp_maplist (XDR *, ypresp_maplist*);
extern  bool_t xdr_yppush_status (XDR *, yppush_status*);
extern  bool_t xdr_yppushresp_xfr (XDR *, yppushresp_xfr*);
extern  bool_t xdr_ypbind_resptype (XDR *, ypbind_resptype*);
extern  bool_t xdr_ypbind_binding (XDR *, ypbind_binding*);
extern  bool_t xdr_ypbind_resp (XDR *, ypbind_resp*);
extern  bool_t xdr_ypbind_setdom (XDR *, ypbind_setdom*);

#else /* K&R C */
extern bool_t xdr_ypstat ();
extern bool_t xdr_ypxfrstat ();
extern bool_t xdr_domainname ();
extern bool_t xdr_mapname ();
extern bool_t xdr_peername ();
extern bool_t xdr_keydat ();
extern bool_t xdr_valdat ();
extern bool_t xdr_ypmap_parms ();
extern bool_t xdr_ypreq_key ();
extern bool_t xdr_ypreq_nokey ();
extern bool_t xdr_ypreq_xfr ();
extern bool_t xdr_ypresp_val ();
extern bool_t xdr_ypresp_key_val ();
extern bool_t xdr_ypresp_master ();
extern bool_t xdr_ypresp_order ();
extern bool_t xdr_ypresp_all ();
extern bool_t xdr_ypresp_xfr ();
extern bool_t xdr_ypmaplist ();
extern bool_t xdr_ypresp_maplist ();
extern bool_t xdr_yppush_status ();
extern bool_t xdr_yppushresp_xfr ();
extern bool_t xdr_ypbind_resptype ();
extern bool_t xdr_ypbind_binding ();
extern bool_t xdr_ypbind_resp ();
extern bool_t xdr_ypbind_setdom ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_YP_H_RPCGEN */
